---
stages:
- name: SelfAssembly
  inputs:
  - type: git
    branch: master
  triggers:
  - type: commit
  jobs:
  - name: WrapPresent
    type: builder
    artifact_dir: ./
    build_type: shell
    script: |-
      #!/bin/bash
      # Â© Copyright IBM Corporation 2015.
      #
      # All rights reserved. This program and the accompanying materials
      # are made available under the terms of the Eclipse Public License v1.0
      # which accompanies this distribution, and is available at
      # http://www.eclipse.org/legal/epl-v10.html
      # Derived from dW article @ https://developer.ibm.com/bluemix/2014/07/03/getting-started-piwik-ibm-bluemix/
      ##########
      # Colors - Lets have some fun ##
      ##########
      Green='\e[0;32m'
      Red='\e[0;31m'
      Yellow='\e[0;33m'
      Cyan='\e[0;36m'
      no_color='\e[0m' # No Color
      beer='\xF0\x9f\x8d\xba'
      delivery='\xF0\x9F\x9A\x9A'
      beers='\xF0\x9F\x8D\xBB'
      eyes='\xF0\x9F\x91\x80'
      cloud='\xE2\x98\x81'
      litter='\xF0\x9F\x9A\xAE'
      fail='\xE2\x9B\x94'
      harpoons='\xE2\x87\x8C'
      tools='\xE2\x9A\x92'
      present='\xF0\x9F\x8E\x81'
      #############
      echo ""
      echo -e "${cloud}${Cyan}  Let's setup Piwik for initial deployment${no_color}"
      echo -e "${tools}${Yellow}    Updating apt-get ...${no_color}"
      sudo apt-get update > /dev/null 2>&1
      # Install jq
      echo -e "${tools}${Yellow}    Installing jq for JSON parsing support...${no_color}"
      sudo apt-get --assume-yes install jq > /dev/null 2>&1
      echo -e "${tools}${Yellow}    Installing zip/unzip...${no_color}"
      sudo apt-get --assume-yes install zip unzip > /dev/null 2>&1
      
      # Let's pull the open source code for Twilio-php SDK
      echo -e "${harpoons}${Yellow}    Updating git submodules ...${no_color}"
      git submodule update --init --recursive > /dev/null 2>&1
      
      echo -e "${harpoons}${Yellow}    Fetching Piwik 3.0.0 Zip ...${no_color}"
      mkdir htdocs
      wget https://builds.piwik.org/piwik-3.0.0.zip -nv -O ./bluezone/piwik.zip
      echo -e "${tools}${Yellow}    Extracting Piwik${no_color}"
      unzip -o ./bluezone/piwik.zip -d ./htdocs > /dev/null 2>&1
      
      echo -e "${harpoons}${Yellow}    Fetching GeoLiteCity Data Zip ...${no_color}"
      wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz -nv -O ./bluezone/GeoLiteCity.dat.gz
      gunzip -c < ./bluezone/GeoLiteCity.dat.gz > ./htdocs/piwik/misc/GeoIPCity.dat
      
      echo -e "${tools}${Yellow}    Setting up some extra marketplace Piwik plugins ...${no_color}"
      echo -e "${harpoons}${Cyan}      Installing SecurityInfo ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/SecurityInfo/download/3.0.2 -nv -O ./bluezone/SecurityInfo.zip
      unzip -o ./bluezone/SecurityInfo.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${harpoons}${Cyan}      Installing LDAP Login ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/LoginLdap/download/3.3.1 -nv -O ./bluezone/LoginLdap.zip
      unzip -o ./bluezone/LoginLdap.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1

      echo -e "${harpoons}${Cyan}      Installing CustomAlerts ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/CustomAlerts/download/3.0.0 -nv -O ./bluezone/CustomAlerts.zip
      unzip -o ./bluezone/CustomAlerts.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${harpoons}${Cyan}      Installing CustomOptOut ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/CustomOptOut/download/0.4.2 -nv -O ./bluezone/CustomOptOut.zip
      unzip -o ./bluezone/CustomOptOut.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${harpoons}${Cyan}      Installing SimpleSysMon ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/SimpleSysMon/download/0.3.1 -nv -O ./bluezone/SimpleSysMon.zip
      unzip -o ./bluezone/SimpleSysMon.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${harpoons}${Cyan}      Installing FlagCounter ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/FlagCounter/download/3.0.0 -nv -O ./bluezone/FlagCounter.zip
      unzip -o ./bluezone/FlagCounter.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${harpoons}${Cyan}      Installing PerformanceInfo ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/PerformanceInfo/download/0.3.1 -nv -O ./bluezone/PerformanceInfo.zip
      unzip -o ./bluezone/PerformanceInfo.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${harpoons}${Cyan}      Installing PlatformsReport ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/PlatformsReport/download/1.0.4 -nv -O ./bluezone/PlatformsReport.zip
      unzip -o ./bluezone/PlatformsReport.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${harpoons}${Cyan}      Installing SimplePageBuilder ...${no_color}"
      wget https://plugins.piwik.org/api/2.0/plugins/SimplePageBuilder/download/1.2.0 -nv -O ./bluezone/SimplePageBuilder.zip
      unzip -o ./bluezone/SimplePageBuilder.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${tools}${Cyan}    Setting up user provided plugins ...${no_color}"
      for f in ./bluezone/configtweaks/plugins; do
          if [ -d ${f} ]; then
              # Will not run if no directories are available
              echo -e "${harpoons}${Cyan}      Installing ${f} User-Provided Plugin ...${no_color}"
              mv $f ./htdocs/piwik/plugins
          else
              echo -e "${fail}${Cyan}      No User-Provided Plugins detected...${no_color}"
          fi
      done
      
      echo -e "${tools}${Yellow}    Setting up some extra marketplace Piwik themes ...${no_color}"
      echo -e "${harpoons}${Cyan}      Installing the CoffeeCup Theme ...${no_color}"
      wget https://themes.piwik.org/api/2.0/plugins/CoffeeCup/download/0.1.3 -nv -O ./bluezone/CoffeeCup.zip
      unzip -o ./bluezone/CoffeeCup.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Installing the ModernGreen Theme ...${no_color}"
      wget https://themes.piwik.org/api/2.0/plugins/ModernGreen/download/0.1.0 -nv -O ./bluezone/ModernGreen.zip
      unzip -o ./bluezone/ModernGreen.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "${tools}${Yellow}    Setting up unicode font support ...${no_color}"
      echo -e "${harpoons}${Cyan}      Installing the unifont.ttf ...${no_color}"
      wget http://piwik.org/wp-content/uploads/unifont.ttf.zip -nv -O ./bluezone/unifont.ttf.zip
      unzip -o ./bluezone/unifont.ttf.zip -d ./htdocs/piwik/plugins/ImageGraph/fonts > /dev/null 2>&1
      
      # Organize the artifact structure to be composer friendly
      echo -e "${tools}${Yellow}    Making artifacts composer install friendly ...${no_color}"
      mv ./htdocs/piwik/composer.json .
      mv ./htdocs/piwik/composer.lock .
      echo -e "${tools}${Yellow}    Patching composer.json paths ...${no_color}"
      jq '.autoload["psr-4"]["Piwik\\Plugins\\"] = "htdocs/piwik/plugins"  | .autoload["psr-4"]["Piwik\\"] = "htdocs/piwik/core"  | .autoload["psr-0"]["Zend_"] = "htdocs/piwik/libs" | .autoload["psr-0"]["HTML_"] = "htdocs/piwik/libs" | .autoload["psr-0"]["PEAR_"] = "htdocs/piwik/libs" | .autoload["psr-0"]["Archive_"] = "htdocs/piwik/libs"' composer.json > tmp.$$.json 
      rm composer.json
      mv tmp.$$.json composer.json
      
      # Setup Twilio support
      echo -e "${tools}${Yellow}    Setting up Twilio support ...${no_color}"
      mv ./bluezone/twilio-php ./bluezone/twilio-php-master
      mv ./bluezone/twilio-php-master ./htdocs/piwik/libs
      mv ./bluezone/apptweaks/Twilio.php ./htdocs/piwik/plugins/MobileMessaging/SMSProvider
      
      # Organize the artifact structure to be CF PHP Buildpack friendly
      echo -e "${cloud}${Yellow}    Making artifacts CF PHP friendly ...${no_color}"
      mv ./bluezone/configtweaks/.bp-config .
      mkdir .extensions
      mkdir .extensions/geoip
      mv ./bluezone/configtweaks/extension.py .extensions/geoip
      mv ./bluezone/configtweaks/.php-extensions .
      
      # Organize the artifact structure to facilitate BMX deploy
      echo -e "${cloud}${Yellow}    Making piwik artifacts ${Cyan}Bluemix ${Yellow}friendly ...${no_color}"
      mv ./bluezone/configtweaks/bootstrap.php ./htdocs/piwik
      mv ./bluezone/configtweaks/.user.ini ./htdocs/piwik
      mv ./bluezone/configtweaks/.htaccess ./htdocs/piwik
      mv ./bluezone/apptweaks/FormDatabaseSetup.php ./htdocs/piwik/plugins/Installation
      mv ./bluezone/apptweaks/Controller.php ./htdocs/piwik/plugins/Installation
      mv ./bluezone/apptweaks/FormFirstWebsiteSetup.php ./htdocs/piwik/plugins/Installation
      mv ./bluezone/apptweaks/upgrade.php ./htdocs/piwik/libs/upgradephp
      
      # Embed config file if provided
      if [ -f "./bluezone/configtweaks/config.ini.php" ]
      then
         echo -e "${tools}${Cyan}    Piwik Config file detected ...${no_color}"
         mv ./bluezone/configtweaks/config.ini.php ./htdocs/piwik/config
      fi
      
      # Cleaning up
      echo -e "${litter}${Yellow}    Cleaning up repository...${no_color}"
      rm -rf ./bluezone
      rm -rf .bluemix
      
      # Generate Config Fetcher Script
      IFS='|' read -ra PROJECT_NAME <<< "$IDS_PROJECT_NAME"
      echo -e "${tools}${Yellow}    Generating config helper download script...${no_color}"
      echo -e "#!/bin/bash" > fetchConfig.sh
      echo -e "rm ./bluezone/configtweaks/config.ini.php" >> fetchConfig.sh
      echo -e "cf files ${IDS_PROJECT_NAME} /app/htdocs/piwik/config/config.ini.php | sed '/Plugins\[\] = \"ExampleAPI\"/d' | sed '/Plugins\[\] = \"ExamplePlugin\"/d' | sed '/Plugins\[\] = \"ExampleRssWidget\"/d' | sed '/Plugins\[\] = \"Feedback\"/d' > ./bluezone/configtweaks/config.ini.php" >> fetchConfig.sh
      echo -e "sed -i -e '1,3d' ./bluezone/configtweaks/config.ini.php" >> fetchConfig.sh
      chmod +x fetchConfig.sh
      echo -e "${present} ${beers}${Green}  Way to go! Your Piwik Assembly present is ready!"
- name: SameDayDelivery
  inputs:
  - type: job
    stage: SelfAssembly
    job: WrapPresent
  triggers:
  - type: stage
  jobs:
  - name: OpenPresent
    type: deployer
    target:
      url: ${CF_TARGET_URL}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      application: ${CF_APP}
    script: |
      #!/bin/bash
      # Â© Copyright IBM Corporation 2015.
      #
      # All rights reserved. This program and the accompanying materials
      # are made available under the terms of the Eclipse Public License v1.0
      # which accompanies this distribution, and is available at
      # http://www.eclipse.org/legal/epl-v10.html
      # For some reason, the deploy stage shell has tracing turned on.  Lets turn it off
      set +x
      ##########
      # Colors - Lets have some fun ##
      ##########
      Green='\x1B[0;32m'
      Red='\x1B[0;31m'
      Yellow='\x1B[0;33m'
      Cyan='\x1B[0;36m'
      no_color='\x1B[0m' # No Color
      beer='\xF0\x9f\x8d\xba'
      delivery='\xF0\x9F\x9A\x9A'
      beers='\xF0\x9F\x8D\xBB'
      eyes='\xF0\x9F\x91\x80'
      cloud='\xE2\x98\x81'
      crossbones='\xE2\x98\xA0'
      litter='\xF0\x9F\x9A\xAE'
      fail='\xE2\x9B\x94'
      harpoons='\xE2\x87\x8C'
      tools='\xE2\x9A\x92'
      present='\xF0\x9F\x8E\x81'
      hourglass='\xE2\x8F\xB3'
      #############
      # http://serverfault.com/questions/7503/how-to-determine-if-a-bash-variable-is-empty#answer-382740
      if [ -z "$(cf s|grep piwikredis|cut -d" " -f1-1)" ]; then
        echo -e "${tools}${Yellow}  Pre-creating RedisCloud Service named ${Cyan}piwikredis${Yellow}${no_color}"
        n=0
        until [ $n -ge 5 ]
        do
           result=$(cf cs rediscloud 30mb piwikredis) && break
           rc=$?;
           if [[ $rc != 0 ]]; then 
             if [[ $result == *"single free resource"* ]]; then
               echo -e "${crossbones}${Red} ${result##*:}" | rev | cut -c 3- | rev
               echo -e "${no_color}"
             fi
             echo -e "${eyes}${Yellow}  Warning: Shifting pre-creation service to lowest tier compose.io plan (Standard). If your Bluemix account is NOT a trial account, you may also consider manually creating a RedisCloud 100mb plan and binding it to your Piwik application.${no_color}"
             cf cs compose-for-redis Standard piwikredis > /dev/null 2>&1 && break
             sleep 8m
             break
           fi
           n=$[$n+1]
           sleep 15
        done
      fi
      if [ -z "$(cf s|grep piwikdb|cut -d" " -f1-1)" ]; then
        echo -e "${tools}${Yellow}  Pre-creating ClearDB MySQL Service named ${Cyan}piwikdb${Yellow}${no_color}"
        q=0
        until [ $q -ge 5 ]
        do
           cf cs cleardb spark piwikdb > /dev/null 2>&1 && break
           q=$[$q+1]
           sleep 15
        done
      fi
      echo -e "${tools}${Yellow}  Sendgrid detection routine ...${no_color}" > /dev/null 2>&1
      if [ -n "$(cf s|grep sendgrid|cut -d" " -f1-1)" ] && [ "$(cf s|grep sendgrid|cut -d" " -f1-1)" != "sendmail" ]; then
        echo -e "${eyes}${Yellow}  Detected existing sendgrid service ${existingSendgrid} within target space${no_color}"
        echo -e "${tools}${Yellow}    Updating manifest.yml file to match target space sendgrid service${no_color}"
        sed -e "s/sendmail/$(cf s|grep sendgrid|cut -d" " -f1-1)/g" ./manifest.yml > manifest.new
        rm manifest.yml
        mv manifest.new manifest.yml
      else
        echo -e "${tools}${Yellow}    Pre-creating Sendgrid Service named ${Cyan}sendmail${Yellow}${no_color}"
        t=0
        until [ $t -ge 2 ]
        do
           cf cs sendgrid bronze sendmail > /dev/null 2>&1 && break
           t=$[$t+1]
           sleep 15
        done
      fi

      p=0
      until [ $p -ge 2 ]
      do
         cf push "${CF_APP}" && echo -e "${beer} ${beers}${Green}  Congrats! Your secure Piwik deploy is up and running!${no_color}" && echo -e "${beer} ${beers}${Green}  finis coronat opus${no_color}" && break
         p=$[$p+1]
         sleep 10
      done
      # view logs
      #cf logs "${CF_APP}" --recent
